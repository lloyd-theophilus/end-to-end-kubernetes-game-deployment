pipeline{
    agent any

    tools {
        nodejs 'node21'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
        DATE = new Date().format('yy.M')
        TAG = "${DATE}.${BUILD_NUMBER}"
        //DOCKER_BUILDKIT='1'
        APP_NAME = "Game_App"
    }
    stages{
        stage("clean workspace"){
            steps{
               cleanWs()
            }
            
        }
        stage("Checkout"){
            steps{
                git branch: 'main', url: "https://github.com/lloyd-theophilus/end-to-end-kubernetes-game-deployment.git"
            }
            
        }
        stage("Code Analysis"){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh" $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=GameApp \
                            -Dsonar.java.binaries=. \
                            -Dsonar.projectKey=GameApp \
                            -Dsonar.sources=. "
                }
            }
            
        }
        stage("quality gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            } 
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        stage("Docker Build Image"){
            steps{
                sh 'docker build -t gameapp:${TAG} .'
            }
            
        }
        stage('Image Scan') {
            
            steps {
                sh 'trivy image --clear-cache --format table -o UM_Assessment.txt --ignore-unfixed --severity LOW,MEDIUM,HIGH,CRITICAL --exit-code 1 gameapp:${TAG}' 
            }  
        }
        stage('Push Image') {
           
            steps {
               script{
                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){   
                      sh "docker tag gameapp:${TAG} lloyddigital/gameapp:${TAG} "
                      sh "docker push lloyddigital/gameapp:${TAG} "
                    }
                }  
            }
        }
        stage('Deploy to Kubernetes'){
            steps{
                script{
                        withKubeConfig(caCertificate: '', region: 'eu-west-2', clusterName: 'K8s-game-cluster', credentialsId: 'aws-credentials', namespace: 'dev', restrictKubeConfigAccess: false) {
                                sh 'kubectl apply -f k8.yml'
                        }   
                }
            }
        }
    }
}